# Multi-stage build for static linking
# Stage 1: Alpine-based build environment with musl (force x86_64 platform)
FROM --platform=linux/x86_64 rust:1.82-alpine as builder

# Install musl development tools and required dependencies  
RUN apk add --no-cache \
    musl-dev \
    pkgconfig \
    openssl-dev \
    openssl-libs-static \
    ca-certificates \
    gcc \
    libc-dev

# Set environment variables for static linking
# Note: RUSTFLAGS are set in .cargo/config.toml for the musl target
ENV PKG_CONFIG_ALL_STATIC=1
ENV OPENSSL_STATIC=1

# Install musl target
RUN rustup target add x86_64-unknown-linux-musl

# Create app directory
WORKDIR /app

# Copy cargo configuration for static linking
COPY .cargo .cargo

# Copy dependency files first for better caching
COPY Cargo.toml ./

# Create a dummy main.rs to build dependencies
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Generate a compatible Cargo.lock and build dependencies
RUN cargo generate-lockfile
RUN cargo build --release --target x86_64-unknown-linux-musl
RUN rm src/main.rs

# Copy source code
COPY . .

# Build the application with static linking
RUN cargo build --release --target x86_64-unknown-linux-musl

# Verify the binary is statically linked
RUN ldd target/x86_64-unknown-linux-musl/release/r-fubon-neo || echo "Static binary confirmed"

# Stage 2: Minimal scratch image for static binary
FROM scratch as static

# Copy CA certificates for HTTPS requests
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy the statically linked binary
COPY --from=builder /app/target/x86_64-unknown-linux-musl/release/r-fubon-neo /r-fubon-neo

# Set entrypoint
ENTRYPOINT ["/r-fubon-neo"]
CMD ["version"]

# Stage 3: Distroless image alternative (slightly larger but more compatible)
FROM gcr.io/distroless/static-debian12:nonroot as distroless

# Copy the statically linked binary
COPY --from=builder /app/target/x86_64-unknown-linux-musl/release/r-fubon-neo /usr/local/bin/r-fubon-neo

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/r-fubon-neo"]
CMD ["version"]